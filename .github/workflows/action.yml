#
name: Create and publish a Docker image

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  env:
  AWS_REGION: ap-south-1

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # minimal (short sha)
            type=sha
          # tags: |
          #   type=ref,event=branch
          #   type=ref,event=pr
          #   type=semver,pattern={{version}}
          #   type=semver,pattern={{major}}.{{minor}}

      - name: Print metadata
        run: |
          echo "Meta: ${{ toJson(steps.meta.outputs) }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
      
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::805395122898:role/github-cd-role
          aws-region: ${{ env.AWS_REGION }}

      # - uses: hashicorp/setup-terraform@v3

      # - run: terraform init

      # - id: plan
      #   run: terraform plan -no-color

      # - id: apply
      #   run: terraform apply -auto-approve -no-color

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Helm
        uses: azure/setup-helm@v1

      # - name: Configure Kubernetes client
      #   uses: silverlyra/setup-aws-eks@v0.1
      #   with:
      #     cluster: ex-github-cd

      - name: Create kubeconfig file
        run: echo "${{ secrets.KUBECONFIG }}" > ${{ github.workspace }}/kubeconfig

      # - name: Deploy service
      #   run: |
      #     kubectl get pods

      - name: Deploy to Kubernetes using Helm
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: helm upgrade my-app-release my-app/ --install --namespace default --debug --values my-app/values.yaml

      - name: Helm list releases
        run: helm list
        
